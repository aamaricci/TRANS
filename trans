#!/usr/bin/perl
use Math::Trig;			# includes trigonometric functions
use Math::Complex;		# includes support for complex 

push @files, "<&STDIN" unless -t STDIN; # stdin is treated like any other file
foreach (@ARGV){
    if (-e "$_"){	    # if file exists, it mush be function name
	push @files, $_;
    } else{
	push @trans, $_;     # otherwise it is an expression for trans
    }
}



foreach (@trans)
{
    if ($_ eq "-h")
      {
	print "**************** TRANS ******************\n";
	print "**      transform data files            **\n";
	print "** Copyright        Kristjan Haule      **\n";
	print "** Version 2.1            22.9.2011     **\n";
	print "** modified version by Adriano Amaricci **\n";
	print "******************************************\n";
	print "\n";
	print "Usage:\n";
	print "\n";
	print "[... |] $0 f1(\#1, \#2, ...), [f2(\#1, \#2, ...)] [file1 file2 ...]\n";
	print "\n";
	print "Example1: cat file | $0 \#1 \#3-\#2 \'tan(\#4)\'\n";
	print "\n";
	print "Example2: $0 \#1, \#2-\#1, \#3/\#1 file1\n";
	print "\n";
	print "note: check your shell passes special characters to $0!\n";
	print "      characters like \\,\$,\# need a double-quote or slash!\n";
	print "\n";
	exit;
      }

    
    # in any user defined rule, it replaces symbol # by spl in the following way
    #    #2:3  ->  $spl[1][2]
    #    #3    ->  $spl[0][3]    
    s/\#(\d+):(\d+)/\$spl\[${\($1-1)}\]\[${\($2-1)}\]/g;
    s/\#(\d+)/\$spl\[0\]\[${\($1-1)}\]/g;
  }

foreach (@files){ open $_, $_;} # All files being transformed are opened

@{$spl[0]} = (' ');		# object spl is initialized

# Main loop
LB: while (defined($spl[0][0])){ # goes ower all coumns
    $i=0;
    foreach $f (@files){	# goes ower all files
	$_ = <$f>;		# reads one line from this file
	# next if /^\s+#/;             # skip comment lines
	if ($_ =~ /^\s*#/){ next; }
	# if (/^\#/){ # if the file is commented, just print it and do nothing
        #     $_ = <$f>;	# read next line in this case 
        # }
	@{$spl[$i++]} = split(' ',$_); # saves the contents of the file into two dimentional array spl
    }		       # $spl[i][j] containes j-th column of i-th file
    if (not defined($spl[0][0])){ # if first column does not exist, we reached end-of-file or 
	last LB;    # end of continuous lines region of file -> finish
    }
    $line = "";		   # the output line initialized
    foreach $col (@trans){ # each column of each file is being processed
	$val = eval $col; # the code for this column, as prepared above, is being evaluated - core step
	$line .= $val . " "; # this transformed column is being glued together into a line
    }
    print "$line\n";		# Finally, print out the resulting row
}


sub real{ return Re(@_[0]);}
sub imag{ return Im(@_[0]);}
sub cmplx{ return @_[0]+i*@_[1];}
sub fermi{ return 1.0/(exp(@_[0])+1);}
sub nbose{ return 1.0/(exp(@_[0])-1);}
sub pow2{ return @_[0]*@_[0];}
sub sign{return @_[0]>=0 ? 1 : -1;}
sub Hbethe{
    my $ceta = @_[0];
    return -0.5*(Im($ceta)-sign(Re($ceta))*sign(Im($ceta))*Im(sqrt($ceta**2-4.)))/pi;
}
sub HBethe{
    my $ceta = @_[0];
    return -2*(Im($ceta)-sign(Re($ceta))*sign(Im($ceta))*Im(sqrt($ceta**2-1.)))/pi;
}

sub seqNUM{
    return (@_[0] .. @_[1]);
}


sub seqABN{
    my $dx = (@_[1]-@_[0])/@_[2];
    $i=0;
    while ($i <  @_[2]){
	$i++;
	@array[$i] = @_[0] + $i*$dx;
    }
    return @array
}

sub seq{
    my $dx = @_[1];
    my $N = int(abs(@_[2]-@_[0])/$dx);
    my $i=0;
    while ($i<$N){
	$i++;
	@array[$i] = @_[0] + $i*$dx;
    }
    return @array
}
